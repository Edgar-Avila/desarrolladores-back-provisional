generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Comment {
  CommentId   Int      @id(map: "PK__Comment__C3B4DFCA29C789AF") @default(autoincrement())
  Content     String   @db.VarChar(Max)
  CreatedDate DateTime @db.DateTime
  PostedImage Bytes    @db.VarBinary(1)
  UserID      Int
  PostID      Int
  Post        Post     @relation(fields: [PostID], references: [PostID], onDelete: Cascade, onUpdate: NoAction, map: "FK__Comment__PostID__4CA06362")
  User        User     @relation(fields: [UserID], references: [UserID], onUpdate: NoAction, map: "FK__Comment__UserID__4BAC3F29")
}

model Post {
  PostID          Int        @id(map: "PK__Post__AA126038496CA38B") @default(autoincrement())
  PublicationDate DateTime   @db.DateTime
  Title           String?    @db.VarChar(50)
  Content         String     @db.VarChar(Max)
  UserID          Int
  PostTypeID      Int
  SharedPostID    Int?
  PostType        PostType   @relation(fields: [PostTypeID], references: [PostTypeID], onUpdate: NoAction, map: "FK__Post__PostTypeID__4316F928")
  Post            Post?      @relation("PostToPost", fields: [SharedPostID], references: [PostID], onDelete: NoAction, onUpdate: NoAction, map: "FK__Post__SharedPost__440B1D61")
  User            User       @relation(fields: [UserID], references: [UserID], onUpdate: NoAction, map: "FK__Post__UserID__4222D4EF")
  Comment         Comment[]
  other_Post      Post[]     @relation("PostToPost")
  Reaction        Reaction[]
}

model PostType {
  PostTypeID          Int                 @id(map: "PK__PostType__AB212610D52DA5EA") @default(autoincrement())
  Name                String              @db.VarChar(50)
  LanguageID          Int
  ProgrammingLanguage ProgrammingLanguage @relation(fields: [LanguageID], references: [LanguageID], onUpdate: NoAction, map: "FK__PostType__Langua__38996AB5")
  Post                Post[]
}

model ProgrammingLanguage {
  LanguageID Int        @id(map: "PK__Programm__B938558B0CE74088") @default(autoincrement())
  Name       String     @db.VarChar(50)
  PostType   PostType[]
}

model Reaction {
  ReactionID     Int          @id(map: "PK__Reaction__46DDF9D4007B34C0") @default(autoincrement())
  CreatedDate    DateTime     @db.DateTime
  UserID         Int
  PostID         Int
  ReactionTypeID Int
  Post           Post         @relation(fields: [PostID], references: [PostID], onDelete: Cascade, onUpdate: NoAction, map: "FK__Reaction__PostID__47DBAE45")
  User           User         @relation(fields: [UserID], references: [UserID], onUpdate: NoAction, map: "FK__Reaction__Reacti__46E78A0C")
  ReactionType   ReactionType @relation(fields: [ReactionTypeID], references: [ReactionTypeID], onUpdate: NoAction, map: "FK__Reaction__Reacti__48CFD27E")
}

model ReactionType {
  ReactionTypeID Int        @id(map: "PK__Reaction__01E625C0F4C029F6") @default(autoincrement())
  Name           String     @db.VarChar(50)
  Icon           Bytes      @db.VarBinary(1)
  Reaction       Reaction[]
}

model User {
  UserID      Int        @id(map: "PK__User__1788CCAC9927BD40") @default(autoincrement())
  Username    String     @unique(map: "UQ__User__536C85E4E4324D35") @db.VarChar(100)
  Email       String     @db.VarChar(100)
  Password    String     @db.VarChar(50)
  CreatedDate DateTime   @db.DateTime
  Comment     Comment[]
  Post        Post[]
  Reaction    Reaction[]
}
