generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Comment {
  CommentId   Int      @id(map: "PK__Comment__C3B4DFCAD0456356") @default(autoincrement())
  Content     String   @db.VarChar(Max)
  CreatedDate DateTime @db.DateTime
  PostedImage Bytes    @db.VarBinary(1)
  UserID      Int
  PostID      Int
  Post        Post     @relation(fields: [PostID], references: [PostID], onDelete: Cascade, onUpdate: NoAction, map: "FK__Comment__PostID__0C85DE4D")
  User        User     @relation(fields: [UserID], references: [UserID], onUpdate: NoAction, map: "FK__Comment__UserID__0B91BA14")
}

model Post {
  PostID          Int        @id(map: "PK__Post__AA126038EBE68FA9") @default(autoincrement())
  PublicationDate DateTime   @db.DateTime
  Title           String?    @db.VarChar(50)
  Content         String     @db.VarChar(Max)
  UserID          Int
  PostTypeID      Int
  SharedPostID    Int?
  PostType        PostType   @relation(fields: [PostTypeID], references: [PostTypeID], onUpdate: NoAction, map: "FK__Post__PostTypeID__02FC7413")
  Post            Post?      @relation("PostToPost", fields: [SharedPostID], references: [PostID], onDelete: NoAction, onUpdate: NoAction, map: "FK__Post__SharedPost__03F0984C")
  User            User       @relation(fields: [UserID], references: [UserID], onUpdate: NoAction, map: "FK__Post__UserID__02084FDA")
  Comment         Comment[]
  other_Post      Post[]     @relation("PostToPost")
  Reaction        Reaction[]
}

model PostType {
  PostTypeID          Int                 @id(map: "PK__PostType__AB21261008942E4A") @default(autoincrement())
  Name                String              @db.VarChar(50)
  LanguageID          Int
  ProgrammingLanguage ProgrammingLanguage @relation(fields: [LanguageID], references: [LanguageID], onUpdate: NoAction, map: "FK__PostType__Langua__778AC167")
  Post                Post[]
}

model ProgrammingLanguage {
  LanguageID Int        @id(map: "PK__Programm__B938558B7A2529AF") @default(autoincrement())
  Name       String     @db.VarChar(50)
  PostType   PostType[]
}

model Reaction {
  ReactionID     Int          @id(map: "PK__Reaction__46DDF9D4056BF7E6") @default(autoincrement())
  CreatedDate    DateTime     @db.DateTime
  UserID         Int
  PostID         Int
  ReactionTypeID Int
  Post           Post         @relation(fields: [PostID], references: [PostID], onDelete: Cascade, onUpdate: NoAction, map: "FK__Reaction__PostID__07C12930")
  User           User         @relation(fields: [UserID], references: [UserID], onUpdate: NoAction, map: "FK__Reaction__Reacti__06CD04F7")
  ReactionType   ReactionType @relation(fields: [ReactionTypeID], references: [ReactionTypeID], onUpdate: NoAction, map: "FK__Reaction__Reacti__08B54D69")
}

model ReactionType {
  ReactionTypeID Int        @id(map: "PK__Reaction__01E625C02E457A50") @default(autoincrement())
  Name           String     @db.VarChar(50)
  Icon           Bytes      @db.VarBinary(1)
  Reaction       Reaction[]
}

model User {
  UserID       Int        @id(map: "PK__User__1788CCAC27EA5756") @default(autoincrement())
  Username     String     @unique(map: "UQ__User__536C85E47E60688C") @db.VarChar(100)
  Email        String     @db.VarChar(100)
  Password     String     @db.Char(60)
  RefreshToken String?    @db.Char(60)
  CreatedDate  DateTime   @db.DateTime
  Comment      Comment[]
  Post         Post[]
  Reaction     Reaction[]
}
